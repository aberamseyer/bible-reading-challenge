server {
    listen 80 default_server;
    listen [::]:80 default_server;

    # Set the server name, e.g., app.localhost or leave as _ for any hostname
    server_name _;

    # Document root for the PHP application's web-accessible files
    # Assumes your application code is in /var/www/html and 'www' is the public web root.
    root /var/www/html/www;
    index index.php index.html;

    # Set client body size limit (matches your nginx-brc.conf)
    client_max_body_size 10M;

    # Logging (customize paths and formats as needed)
    # access_log /var/log/nginx/application_access.log;
    # error_log /var/log/nginx/application_error.log;

    # Handle 404 errors with a custom PHP page
    error_page 404 = /404.php;
    location = /404.php {
        # Process /404.php via PHP-FPM
        # Using '=' for exact match. 'internal' could also be used if you only want it accessible via error_page.
        fastcgi_pass php:9000; # php-fpm service name and port from docker-compose.yml
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        # Prevent error page loops if 404.php itself is missing or causes an error
        fastcgi_intercept_errors off; # So PHP handles the error page rendering
    }

    location / {
        # Try to serve file directly, then as a directory.
        # If neither exists, pass to the named location @rewrite_php_ext to check for a .php file.
        try_files $uri $uri/ @rewrite_php_ext;
    }

    location @rewrite_php_ext {
        # This block handles requests that were not found as a direct file or directory.
        # It checks if a .php file with the same name exists.
        # e.g. if /about is requested, it checks for /about.php.
        # $uri here is the original request URI, e.g., /about
        if (-f $document_root$uri.php) {
            # If /path.php exists, rewrite the request to /path.php and process it again.
            # The 'last' flag makes Nginx re-evaluate the request with the new URI,
            # which will then be caught by the `location ~ \.php$` block.
            rewrite ^(.*)$ $1.php last;
        }

        # If a corresponding .php file is not found, return a 404 error.
        # If your application uses a single index.php to handle all non-static routes (front controller pattern),
        # you might change this to: rewrite ^ /index.php?$query_string last;
        return 404;
    }

    # Process PHP files
    location ~ \.php$ {
        try_files $uri =404; # Return 404 if the PHP file itself doesn't exist. This is a good security measure.

        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        # The `php` service name must match the service name in your docker-compose.yml
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params; # Includes basic CGI params like SCRIPT_NAME, REQUEST_URI etc.

        # SCRIPT_FILENAME must point to the actual PHP file on disk within the PHP-FPM container.
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        # fastcgi_param PATH_INFO $fastcgi_path_info; # Uncomment if your application uses PATH_INFO for routing.

        # PHP ini settings (upload_max_filesize, post_max_size, max_input_vars)
        # are best managed in the PHP Dockerfile (php.ini or FPM pool config)
        # rather than here with fastcgi_param PHP_VALUE, as those are already configured in the PHP Dockerfile.
    }

    # Deny access to .htaccess files and other hidden files, as Nginx does not use them.
    location ~ /\. {
        deny all;
    }

    # Cache control for static assets. Adjust cache times as needed.
    location ~* \.(?:ico|css|js|gif|jpe?g|png|svg|woff|woff2|ttf|eot|otf|webmanifest|xml|txt)$ {
        expires 1M; # Cache these assets for 1 month.
        access_log off; # Disable access logging for static assets to reduce noise.
        add_header Cache-Control "public";
    }
}
