services:
  php:
    build:
      context: .
      dockerfile: .docker/php/Dockerfile
    container_name: brc_php
    restart: unless-stopped
    volumes:
      - ./:/var/www/html
      # The brc.db file will be available at /var/www/html/brc.db due to the above mount
      # Ensure brc.db exists in your project root on the host.
    env_file: ".env"
    depends_on:
      - redis
    networks:
      - brc_network

  cron:
    build:
      context: .
      dockerfile: .docker/php/Dockerfile # Uses the same PHP environment
    container_name: brc_cron
    restart: unless-stopped
    volumes:
      - ./:/var/www/html # Access to application code
      - ./.docker/cron/crontab:/etc/cron.d/app-cron # Mount your crontab
    env_file: ".env"
    depends_on:
      - redis
    networks:
      - brc_network
    command: >
      sh -c "chmod 0644 /etc/cron.d/app-cron && \
             crontab /etc/cron.d/app-cron && \
             echo 'Starting cron daemon...' && \
             crond -b -l 8 -L /var/log/cron_daemon.log && \
             echo 'Cron daemon started in background. Tailing job output FIFO.' && \
             tail -F /var/log/cron.fifo"
    # Use -F for robustness with log rotation/recreation
    # Explanation of crond flags:
    # -b : Run in background (daemonize). This is important because `tail -F` needs to be the foreground process.
    # -l 8 : Set log level (0-8, 8 is debug). Logs from crond itself (not your jobs) will go to syslog or the specified log file.
    # -L /var/log/cron_daemon.log : Log crond's own messages to this file (optional, can also go to syslog).

  nginx:
    build:
      context: .docker/nginx
      dockerfile: Dockerfile
    container_name: brc_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HOST_PORT:-8080}:80" # Host port:Container port for HTTP app
    volumes:
      - ./:/var/www/html # Mount the whole project to access /var/www/html/www
    depends_on:
      - php
    networks:
      - brc_network

  socket:
    build:
      context: .
      dockerfile: .docker/socket/Dockerfile
    container_name: brc_socket
    restart: unless-stopped
    ports:
      - "${SOCKET_HOST_PORT:-8085}:${SOCKET_PORT:-8085}"
    volumes:
      - ./socket:/usr/src/app # Mount socket server code
      - /usr/src/app/node_modules # Anonymous volume to "protect" node_modules from image
      - ./brc.db:/usr/src/app/brc.db:ro # Mount SQLite DB read-only for server
      - ./brc.db-shm:/usr/src/app/brc.db-shm:ro
      - ./brc.db-wal:/usr/src/app/brc.db-wal:ro
    env_file: ".env"
    depends_on:
      - redis
    networks:
      - brc_network

  redis:
    image: redis:7-alpine
    container_name: brc_redis
    env_file: ".env"
    restart: unless-stopped
    # ports:
    # Expose Redis to host only if needed for external tools/debugging, not for app communication
    # - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --port ${REDIS_PORT}
    networks:
      - brc_network

volumes:
  redis_data:

networks:
  brc_network:
    driver: bridge
